<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />
	<!-- This is needed for AspectJ LWT for Spring. 
	     aop.xml in META-INF folder
	     Also needed <Loader loaderClass="org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader"/> 
	        in tomcat configuration context
	     Also needed -javaagent:C:\Users\A\.m2\repository\org\springframework\spring-instrument\3.2.10.RELEASE\spring-instrument-3.2.10.RELEASE.jar
	        in jre variables   
	<context:load-time-weaver/>
	-->	
	
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
	  <property name="locations">
	    <list>
	      <value>classpath:messages.properties</value>
	      <value>/WEB-INF/jdbc.properties</value>
	    </list>
	  </property>	
	</bean>	

	<bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
  	        <property name="maxUploadSize" value="100000000"/> 
	</bean> 

    <util:properties id="appProperties" 
                    location="classpath:application.properties"/>
    <util:properties id="shopProperties" 
                    location="classpath:shop.properties"/>
	<!-- Root Context: defines shared resources visible to all other web components -->	

<!-- DataTables map of column numbers and namens-->
 	<util:map id="productDataTableColumnsMap">
 		<entry key="0" value="s.name"/>
 		<entry key="1" value="c.name"/>
 		<entry key="2" value="p.url"/>
 		<entry key="3" value="b.name"/>
 		<entry key="4" value="p.model"/>
 		<entry key="5" value="s.sale_price, s.retail_price"/>
 		<entry key="6" value="p.ordering"/>
 		<entry key="7" value="p.enabled"/>
 	</util:map>	

 	<util:map id="orderDataTableColumnsMap">
 		<entry key="0" value="o.order_number"/>
 		<entry key="1" value="o.submit_date"/>
 		<entry key="2" value="(coalesce(c.first_name,'')||' '||coalesce(c.last_name,'')||' '||coalesce(c.middle_name,''))"/>
 		<entry key="3" value="o.email_address"/>
 		<entry key="4" value="o.order_total"/>
 		<entry key="5" value="s.short_name_r"/>
 	</util:map>	


	<bean id="productDisplayNameModificator" class="com.akartkam.inShop.service.extension.DefaultProductDisplayNameModificatorImpl">
		<property name="allowedCategoriesId">
			<util:list value-type="java.lang.String">
				<value>47160881-897f-417d-9dd3-07b85b4b0af9</value>
				<value>67fe276a-f708-403c-b0dd-a00bbf112fd2</value>
				<value>d7cc11da-c38e-4858-a48d-e9cb4c20148b</value>
				<value>79db58e6-dacb-47ad-96a8-88982a9edd66</value>
				<value>407bf212-7be9-4d9b-941f-6751fec23c86</value>
				<value>a0771737-06e0-4582-b876-cd485aacdd74</value>
			</util:list>
		</property>
	</bean>
	
 	<bean id="orderNumberGenerator" class="com.akartkam.inShop.util.OrderNumberGeneratorFactoryBean">
        <property name="parameters">
          <props>
            <prop key="orderNumberPrefix">#{shopProperties['orderNumberPrefix']}</prop>
            <prop key="useAutogenerateOrderNumber">#{shopProperties['useAutogenerateOrderNumber']}</prop>
            <prop key="sql">#{T(com.akartkam.inShop.util.Constants).SELECT_ORDER_NUMBER_GENERATOR_POSTGRES}</prop>
          </props>
        </property>
	</bean>
	
 	<!-- entity url preffixes & postfixes -->
 	<bean id="entityUrlPrefixes" class="java.util.Properties">
		<constructor-arg>
    		<props>
 				<prop key="#{T(com.akartkam.inShop.util.Constants).PRODUCT_CLASS}">product</prop>
 				<prop key="#{T(com.akartkam.inShop.util.Constants).CATEGORY_CLASS}">category</prop>
 				<prop key="#{T(com.akartkam.inShop.util.Constants).BRAND_CLASS}">brand</prop>
 				<prop key="#{T(com.akartkam.inShop.util.Constants).PAGE_CLASS}">page</prop>
 			</props>
 		</constructor-arg>
 	</bean>

 	<bean id="entityUrlModificator" class="com.akartkam.inShop.service.extension.DefaultEntityUrlModificatorImpl">
 		<property name = "urlPrefixes">
			<ref bean="entityUrlPrefixes" />
 		</property> 	
 	</bean>
 	
 	<!--  -->
 	
    <!-- My own formatters -->
    
    <bean id="currencyNumberFormatter" class="com.akartkam.inShop.formatter.CurrencyNumberFormatter">
    	<property name="currencySymbol" value="#{appProperties['inShop.currencySymbol']}"/>
    	<property name="groupingSeparator" value="#{appProperties['inShop.groupingSeparator']}"/>
    	<property name="monetaryDecimalSeparator" value="#{appProperties['inShop.monetaryDecimalSeparator']}"/>    
    </bean>
    
    <bean id="currencyFormatter" class="com.akartkam.inShop.formatter.CurrencyFormatAnnotationFormatterFactory">
    </bean>
    
	<bean id="formattingConversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	    <property name="formatters">
	      <set>
	        <ref bean="currencyFormatter" />
	      </set>
	    </property>
	</bean>
    

   
    <bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
       <property name="templateEngine" ref="templateEngine" />
       <property name="characterEncoding" value="UTF-8" />
	   <property name="contentType" value="text/html; charset=UTF-8" />
    </bean> 	
	
	
	<!-- Thymeleaf  -->
    <bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
      <property name="prefix" value="/WEB-INF/templates/" />
      <property name="suffix" value=".html" />
      <property name="characterEncoding" value="UTF-8" />
      <property name="templateMode" value="HTML5" />
      <property name="order" value="2" />
      <!-- Template cache is true by default. Set to false if you want -->
      <!-- templates to be automatically updated when modified.        -->
      <property name="cacheable" value="false" />
    </bean>

    <bean id="emailTemplateResolver" class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
      <property name="prefix" value="mail/" />
      <property name="suffix" value=".html" />
      <property name="characterEncoding" value="UTF-8" />
      <property name="templateMode" value="HTML5" />
      <property name="order" value="1" />
      <property name="cacheable" value="false" />
    </bean>
    
    <import resource="data.xml" />
    
    <bean id="messageResolver" class="org.thymeleaf.spring3.messageresolver.SpringMessageResolver">
    	<property name="messageSource" ref="messageSource" />
	</bean>

    <bean id="emailTemplateEngine" class="org.thymeleaf.TemplateEngine">
      <property name="templateResolvers">
	      <set>
	        <ref bean="emailTemplateResolver" />
	      </set>      
      </property>
      <property name="messageResolver" ref="messageResolver" />
	  <!-- These lines add the dialect to Thymeleaf -->
	  <property name="additionalDialects">
	    <set>
	      <bean class="nz.net.ultraq.thymeleaf.LayoutDialect"/>
	      <bean class="com.akartkam.inShop.thymeleaf.dialects.AisDialect"></bean>
	    </set>
  	  </property>
    </bean>	


    <bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
      <property name="templateResolvers">
	      <set>
	        <ref bean="templateResolver" />
<!-- 	        <ref bean="emailTemplateResolver" />  -->
	      </set>      
      </property>
	  <!-- These lines add the dialect to Thymeleaf -->
	  <property name="additionalDialects">
	    <set>
	      <bean class="nz.net.ultraq.thymeleaf.LayoutDialect"/>
	      <bean class="org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect"/>
	      <bean class="com.akartkam.inShop.thymeleaf.dialects.AisDialect"></bean>
	    </set>
  	  </property>
    </bean>	
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="#{appProperties['mail.server.host']}" />
		<property name="port" value="#{appProperties['mail.server.port']}" />
		<property name="protocol" value="#{appProperties['mail.server.protocol']}" />
		<property name="username" value="#{appProperties['mail.server.username']}" />
		<property name="password" value="#{appProperties['mail.server.password']}" />
	
		<property name="javaMailProperties">
		   <props>
	       	   <prop key="mail.smtp.auth" >#{appProperties['mail.smtp.auth']}</prop>
	       	   <prop key="mail.smtp.starttls.enable">#{appProperties['mail.smtp.starttls.enable']}</prop>
	       	   <prop key="mail.smtp.quitwait">#{appProperties['mail.smtp.quitwait']}</prop> 
	       	   <prop key="mail.smtp.from">#{appProperties['mail.smtp.from']}</prop>
	       	   <prop key="mail.smtp.connectiontimeout">#{appProperties['mail.smtp.connectiontimeout']}</prop>
	       </props>
		</property>
	</bean>    
	
	

	<context:component-scan base-package="com.akartkam.inShop.dao;com.akartkam.inShop.service;" />


	
	<import resource="inshop-security.xml" />
	

	<!-- This is needed for AspectJ LWT to modify product display name via AOP
	<bean id="productFieldsModifyerExtensionAspect" class="com.akartkam.inShop.service.aop.ProductFieldsModifyerExtensionAspect"
      factory-method="aspectOf">
  		<property name="productDisplayNameModificator" ref="productDisplayNameModificator"/>
	</bean>
	-->	
	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
	    <property name="locateExistingServerIfPossible" value="true" />
	</bean>	

	<bean id="hibernateStatisticsBean" class="org.hibernate.jmx.StatisticsService">
	    <property name="statisticsEnabled" value="true"/>
	    <property name="sessionFactory">
	         <ref local="sessionFactory"/>
	    </property>
	</bean>	

	<bean id="jmxExporter" class="org.springframework.jmx.export.MBeanExporter"
	    lazy-init="false">
	    <property name="server" ref="mbeanServer" />
	    <property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING"/>
	    <property name="beans">
	        <map>               
	            <entry key="Hibernate:application=Statistics" value-ref="hibernateStatisticsBean" />
	        </map>
	    </property>
	</bean>
	

</beans>
